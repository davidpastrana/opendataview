
# execute test with just one csv file ( true or false and file name for testing )

-testmode=true
-testfile=httpckan.data.ktn.gv.atstoragef20140630T133A123A02.832Zsteuergem12.csv

# dump all data into database - for showing the data in web interface (true or false) 
-executeSQLqueries=false
-autodetectSchema=true


# true or false to show debug messages 
-geonamesdebugmode=false
-fieldtypesdebugmode=false


# directory names and sql file name to be generated ( you can decide any name but csvfiles_dir must exist! ) 
-csvfiles_dir=/Users/david/Desktop/at_dump_v1/wwdagvat/
-tmp_dir=/Users/david/Desktop/at_dump_v1/wwdagvat/tmp/
-processed_dir=/Users/david/Desktop/at_dump_v1/wwdagvat/tmp/processed/
-newformat_dir=/Users/david/Desktop/at_dump_v1/wwdagvat/tmp/processed/new_format/
-enriched_dir=/Users/david/Desktop/at_dump_v1/wwdagvat/tmp/processed/enriched/
-missinggeoreference_dir=/Users/david/Desktop/at_dump_v1/wwdagvat/tmp/processed/discarded_files/
-sqlinserts_file=/Users/david/Desktop/at_dump_v1/wwdagvat/tmp/processed/sql_inserts.sql
  
# number of rows you want to test 
-nrowchecks=20

# p-value - significance of error for discovering field types - lower number means more precision going from 0.1-0.5 (90% - 50%) 
-pvalue_nrowchecks=0.3

# regular expressions to detect field types 
-imageRegex=.*.(jpg|gif|png|bmp|ico)$
-phoneRegex=^\\+?[0-9. ()-]{10,25}$
-cityRegex=.*[a-z]{3,30}.*
-archiveRegex=.*.(zip|7z|bzip(2)?|gzip|jar|t(ar|gz)|dmg)$
-documentRegex=.*.(doc(x|m)?|pp(t|s|tx)|o(dp|tp)|pub|pdf|csv|xls(x|m)?|r(tf|pt)|info|txt|tex|x(ml|html|ps)|rdf(a|s)?|owl)$
-openinghoursRegex=([a-z ]+ )?(mo(n(day)?)?|tu(e(s(day)?)?)?|we(d(nesday)?)?|th(u(r(s(day)\u200C\u200B?)?)?)?|fr(i(day)?)?\u200C\u200B|sa(t(urday)?)?|su(n\u200C\u200B(day)?)?)(-|:| ).*|([a-z ]+ )?(mo(n(tag)?)?|di(e(n(stag)?)?)?|mi(t(woch)?)?|do(n(er(s(tag)\u200C\u200B?)?)?)?|fr(i(tag)?)?\u200C\u200B|sa(m(stag)?)?|do(n(erstag)?)?)(-|:| ).*
-dateRegex=([0-9]{2})?[0-9]{2}( |-|\\/|.)[0-3]?[0-9]( |-|\\/|.)([0-9]{2})?[0-9]{2}
-yearRegex=^(?:18|20)\\d{2}$
-currencyRegex=^(\\d+|\\d+[.,']\\d+)\\p{Sc}|\\p{Sc}(\\d+|\\d+[.,']\\d+)$
-percentageRegex=^(\\d+|\\d+[.,']\\d+)%|%(\\d+|\\d+[.,']\\d+)$
-postcodeRegex=^[0-9]{2}$|^[0-9]{4}$
-nutsRegex=\\w{3,5}
-shapeRegex=point\\s*\\(([+-]?\\d+\\.?\\d+)\\s*,?\\s*([+-]?\\d+\\.?\\d+)\\)
-latitudeRegex=^-?([1-8]?[1-9]|[1-9]0)\\.{1}\\d{4,9}$
-longitudeRegex=^-?([1]?[1-7][1-9]|[1]?[1-8][0]|[1-9]?[0-9])\\.{1}\\d{4,9}$
-latlngRegex=([+-]?\\d+\\.?\\d+)\\s*,\\s*([+-]?\\d+\\.?\\d+)
-possiblenameRegex=.*[0-9]+.*

# country code used to detect phone numbers 
-countrycode=AT

# shapes file to convert nuts codes (nuts1,nuts2,nuts3) into georeferences 
-shapes_file=/NUTS_2013_SHP/data/NUTS_RG_01M_2013.shp

# geonames database configuration 
-geonames_dbdriver=org.postgresql.Driver
-geonames_dburl=jdbc:postgresql://127.0.0.1:5432/geonames
-geonames_dbusr=postgres
-geonames_dbpwd=postgres
 
# web interface database configuration 
-web_dbdriver=org.postgresql.Driver
-web_dburl=jdbc:postgresql://127.0.0.1:5432/spatialdatasearch
#web_dburl=jdbc:postgresql://spatialdatasearch.com:5432/spatialdatasearch
-web_dbusr=postgres
-web_dbpwd=postgres

# statements executed in geonames database for trying different attempts 
-st1postcode=select p.name,admin3name,code,p.latitude,p.longitude,g.population,g.elevation from postalcodes p inner join geoname g on p.admin3 = g.admin3 where code like ? order by code asc;
-st2postcode=select p.name,admin3name,code,p.latitude,p.longitude,g.population,g.elevation from postalcodes p inner join geoname g on p.admin3 = g.admin3 where code = ? order by code asc;
-st1city=select geonameid,name,latitude,longitude,population,elevation from geoname where asciiname = ? order by population desc;
-st2city=select geonameid,name,latitude,longitude,population,elevation from geoname where asciiname like ? or asciiname like ? order by population desc;
-st3city=select geonameid,name,latitude,longitude,population,elevation from geoname where asciiname like ? or asciiname like ? order by population desc;



